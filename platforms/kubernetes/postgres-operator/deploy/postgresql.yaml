apiVersion: postgres.radondb.io/v1
kind: PostgreSQL
metadata:
  name: lzzhang
  #namespace: radondb-postgres-operator
spec:
  action: start #stop start
  deletepvc: true
  volume_type: local       # local/cloud
  antiaffinity:
    policy: preferred                             # preferred/required
    podAntiAffinityTerm: autofailover-readwrite   # none/autofailover-readwrite/autofailover-readwrite-readonly
    topologyKey: "kubernetes.io/hostname"         # when policy is required, only allow "kubernetes.io/hostname"
  services:
    - selector: autofailover # autofailover/primary/standby/readonly/standby-readonly
      metadata:
        name: autofailover
      spec:
        type: ClusterIP
        ports:
          - name: exporter # cant' change the name
            port: 9187 #targetPort: 9187
    - selector: primary # autofailover/primary/standby/readonly/standby-readonly
      metadata:
        name: readwrite
      spec:
        type: ClusterIP
        ports:
          - name: prime # cant' change the name
            port: 5432
          - name: exporter # cant' change the name
            port: 9187
    - selector: standby-readonly
      metadata:
        name: standby-readonly
      spec:
        type: ClusterIP
        ports:
          - name: prime # cant' change the name
            port: 5432
          - name: exporter # cant' change the name
            port: 9187
  autofailover:
    hbas:
      - host all all all md5
    configs:
      - enable_seqscan=on
    podspec:
      terminationGracePeriodSeconds: 60
#      priorityClassName: high-priority
      containers:
        - image: radondb-postgresql:12.12-v1.0.0
          imagePullPolicy: IfNotPresent
          name: postgresql #can't change the name
          volumeMounts:
            - name: data # can't change the name
              mountPath: /var/lib/postgresql/data
          resources:
            limits:
              memory: "200Mi"
              cpu: "0.2"
        - image: radondb-postgres-exporter:v0.9.0
          imagePullPolicy: IfNotPresent
          name: exporter # can't change the name
          resources:
            limits:
              memory: "100Mi"
              cpu: "0.1"
    volumeClaimTemplates:
      - metadata:
          name: data
        spec:
          accessModes: [ "ReadWriteOnce" ]
          resources:
            requests:
              storage: 1Gi
  postgresql:
    users:
      admin:
        - name: root
          password: root
      normal:
        - name: lzzhang
          password: lzzhang
    hbas:
      - host all all all md5
    configs:
      - max_connections=133
      - shared_buffers=133MB
      - port=5432
      - enable_seqscan=on
    readwriteinstance:
      replicas: 2
      podspec:
        terminationGracePeriodSeconds: 60
        containers:
          - image: radondb-postgresql:12.12-v1.0.0
            imagePullPolicy: IfNotPresent
            name: postgresql #can't change the name
            volumeMounts:
              - name: data # can't change the name
                mountPath: /var/lib/postgresql/data
            resources:
              limits:
                memory: "200Mi"
                cpu: "0.2"
          - image: radondb-postgres-exporter:v0.9.0
            imagePullPolicy: IfNotPresent
            name: exporter # can't change the name
            resources:
              limits:
                memory: "100Mi"
                cpu: "0.1"
      volumeClaimTemplates:
        - metadata:
            name: data
          spec:
            accessModes: [ "ReadWriteOnce" ]
            resources:
              requests:
                storage: 1Gi
    readonlyinstance:
      streaming: async  #sync/async
      replicas: 0
      podspec:
        terminationGracePeriodSeconds: 60
        containers:
          - image: radondb-postgresql:12.12-v1.0.0
            imagePullPolicy: IfNotPresent
            name: postgresql #can't change the name
            volumeMounts:
              - name: data # can't change the name
                mountPath: /var/lib/postgresql/data
            resources:
              limits:
                memory: "200Mi"
                cpu: "0.2"
          - image: radondb-postgres-exporter:v0.9.0
            imagePullPolicy: IfNotPresent
            name: exporter # can't change the name
            resources:
              limits:
                memory: "100Mi"
                cpu: "0.1"
      volumeClaimTemplates:
        - metadata:
            name: data
          spec:
            accessModes: [ "ReadWriteOnce" ]
            resources:
              requests:
                storage: 1Gi
#  backup: TODO later. cronbackup, manual backup by kubectl patch
  #restore:
  #  fromssh:
  #    path: /home/lzzhang/xx
  #    address: root:password:192.168.0.8:22 # or local 'local' restore from the first postgresql node
  S3:
    ACCESS_KEY: "PFDHBVEIQIZYYGNTENJY"
    SECRET_KEY: "7f3SBspTALsJw2NXmuD1253LcxwdCvSdoMs03NkV"
    ENDPOINT: "http://s3.pek3.qingstor.com/"
    BUCKET: "postgresql"
    PATH: "test/backup"
  backup:
    manual:
      id: 1
      label: postgresql-backup
#    cron:
#      enable: true
#      label: xxx
#      schedule: xxx
    policy:
      archive: 'on'                         # whether to archive WAL. on/off
      compression: gzip                     # backup compression. none/gzip/bzip2/snappy
      encryption: AES256                    # backup encryption. none/AES256/aws:kms
      retention: REDUNDANCY 10              # backup retention policy. none/REDUNDANCY value/RECOVERY WINDOW OF value {DAYS | WEEKS | MONTHS}
                                            # none: backup does not expire
                                            # REDUNDANCY value: keep the number of backups. eg: REDUNDANCY 10.
                                            # RECOVERY WINDOW OF value {DAYS | WEEKS | MONTHS}: keep backup time. eg: RECOVERY WINDOW OF 60 DAYS
#  restore:
#    froms3:
#      recovery_time: Fri Sep 30 10:10:57 2022
#      recovery_label: xxx
#      recovery_backupid: xxx
#  backup:
#    kind: single        # single/schedule
#  restore:
#    froms3:
#      recovery_time: 2022-09-30 17:40:01
